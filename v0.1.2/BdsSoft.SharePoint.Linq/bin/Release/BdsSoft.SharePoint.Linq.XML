<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BdsSoft.SharePoint.Linq</name>
    </assembly>
    <members>
        <member name="T:BdsSoft.SharePoint.Linq.FieldAttribute">
            <summary>
            Mapping attribute for SharePoint list fields, applied on entity class properties.
            </summary>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.FieldAttribute.#ctor(System.String,BdsSoft.SharePoint.Linq.FieldType)">
            <summary>
            Creates a field mapping to the specified underlying list field in SharePoint.
            </summary>
            <param name="field">SharePoint list field where the property is mapped to.</param>
            <param name="fieldType">SharePoint type of the list field.</param>
            <remarks>The field name should not be XML-encoded. This will be done automatically if needed.</remarks>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.FieldAttribute.Field">
            <summary>
            Name of the list field in SharePoint.
            </summary>
            <remarks>The field name should not be XML-encoded. This will be done automatically if needed.</remarks>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.FieldAttribute.FieldType">
            <summary>
            List field type in SharePoint.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.FieldAttribute.Id">
            <summary>
            String-representation of the GUID that uniquely identifies the list field in SharePoint.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.FieldAttribute.ReadOnly">
            <summary>
            Indicates whether the list field in SharePoint is read-only.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.FieldAttribute.Calculated">
            <summary>
            Indicates whether the list field in SharePoint is calculated.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.FieldAttribute.OtherChoice">
            <summary>
            Points to a string property in the entity type that contains the fill-in choice of a multi-choice list field in SharePoint.
            </summary>
        </member>
        <member name="T:BdsSoft.SharePoint.Linq.ListAttribute">
            <summary>
            Attribute holds metadata about the underlying SharePoint list on an entity type class definition.
            </summary>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.ListAttribute.#ctor(System.String)">
            <summary>
            Creates an entity class mapping to the specified underlying SharePoint list.
            </summary>
            <param name="list">SharePoint list where the entity type is mapped to.</param>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.ListAttribute.List">
            <summary>
            SharePoint list where the entity type is mapped to.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.ListAttribute.Id">
            <summary>
            String-representation of the GUID that uniquely identifies the SharePoint list.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.ListAttribute.Version">
            <summary>
            Version number of the SharePoint list.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.ListAttribute.Path">
            <summary>
            Relative URL path to the SharePoint list on the server.
            </summary>
        </member>
        <member name="T:BdsSoft.SharePoint.Linq.ChoiceAttribute">
            <summary>
            Mapping attribute for (multi-)choice values to enum fields.
            </summary>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.ChoiceAttribute.#ctor(System.String)">
            <summary>
            Creates an enum field mapping to the specified underlying SharePoint choice value.
            </summary>
            <param name="choice">SharePoint choice value where the field is mapped to.</param>
            <remarks>The choice value should not be XML-encoded. This will be done automatically if needed.</remarks>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.ChoiceAttribute.Choice">
            <summary>
            Name of the choice value in SharePoint.
            </summary>
            <remarks>The choice value should not be XML-encoded. This will be done automatically if needed.</remarks>
        </member>
        <member name="T:BdsSoft.SharePoint.Linq.FieldType">
            <summary>
            Supported SharePoint field types for entity property mapping.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.None">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.Boolean">
            <summary>
            Boolean field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.Calculated">
            <summary>
            Calculcated field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.Choice">
            <summary>
            Choice field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.Currency">
            <summary>
            Currency field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.DateTime">
            <summary>
            DateTime field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.Integer">
            <summary>
            Integer field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.MultiChoice">
            <summary>
            MultiChoice field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.Note">
            <summary>
            Note field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.Number">
            <summary>
            Number field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.Text">
            <summary>
            Text field.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.FieldType.URL">
            <summary>
            URL field.
            </summary>
        </member>
        <member name="T:BdsSoft.SharePoint.Linq.Url">
            <summary>
            Represents a URL used in a SharePoint list. Extends a Uri with a friendly name that indicates the title of the URL.
            </summary>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.Url.GetHashCode">
            <summary>
            Returns the hash code for the URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.Url.Equals(System.Object)">
            <summary>
            Checks for equality with a given a Url instance.
            </summary>
            <param name="obj">Object to check for equality.</param>
            <returns>True if both objects represent the same URL; false otherwise.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.Url.op_Equality(BdsSoft.SharePoint.Linq.Url,System.String)">
            <summary>
            Checks for equality between a Url and a string-representation of a URL. Used for LINQ queries that compare a URL field with a string containing the URL's address.
            </summary>
            <param name="url">Url to check.</param>
            <param name="address">URL address string representation to check.</param>
            <returns>True if the Url and the string refer to the same URL; false otherwise.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.Url.op_Inequality(BdsSoft.SharePoint.Linq.Url,System.String)">
            <summary>
            Checks for non-equality between a Url and a string-representation of a URL. Used for LINQ queries that compare a URL field with a string containing the URL's address.
            </summary>
            <param name="url">Url to check.</param>
            <param name="address">URL address string representation to check.</param>
            <returns>True if the Url and the string don't refer to the same URL; false otherwise.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.Url.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Url class from the specified instances of the SerializationInfo and StreamingContext classes.
            </summary>
            <param name="info">An instance of the SerializationInfo class containing the information required to serialize the new Url instance.</param>
            <param name="context">An instance of the StreamingContext class containing the source of the serialized stream associated with the new Uri instance.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.Url.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds the friendly name to the SerializationInfo object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.Url.FriendlyName">
            <summary>
            Gets or sets the friendly name for the URL.
            </summary>
        </member>
        <member name="T:BdsSoft.SharePoint.Linq.SharePointDataSource`1">
            <summary>
            Query provider for SharePoint lists.
            </summary>
            <typeparam name="T">Entity type for the underlying SharePoint list items.</typeparam>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._doc">
            <summary>
            XmlDocument object used to build query fragments; acts a the root for all XML elements used while parsing the query.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._list">
            <summary>
            SharePoint list to connect to. Should be null when web services are used.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._ws">
            <summary>
            SharePoint web services proxy to work with lists.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._wsList">
            <summary>
            Name of the list accessed over web services.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._where">
            <summary>
            Where clause of the query, based on the CAML query format's Where element.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._order">
            <summary>
            Ordering clause of the query, based on the CAML query format's OrderBy element.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._projection">
            <summary>
            Fields required to perform the projection clause of the query, based on the CAML query format's ViewFields element. Can be empty in case no projection is done and/or all fields are required in the query result.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._project">
            <summary>
            Delegate for the projection logic, generated by compiling the projection's lambda expression (e.g. u =&gt; new { u.Name }). Takes an object of the original entity type used in the query (<see cref="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._originalType"/>).
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._projectProps">
            <summary>
            Set of PropertyInfo objects for all the fields used in the projection portion of the query. Used to build the projection (<see cref="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._projection"/>) without duplicates.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1.top">
            <summary>
            Optional number of "top" rows to query for, with the semantics of the TOP construct in SQL. Gathered by parsing Take(n) calls.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._originalType">
            <summary>
            Original type of the query entity types, set to typeof(T) during construction of a new data source instance. Used when creating the pre-projection objects during query execution and to execute the projection delegate (<see cref="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._project"/>).
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._log">
            <summary>
            Logger object to report information about the query when executing.
            </summary>
        </member>
        <member name="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._checkVersion">
            <summary>
            Indicates whether the version of the list on the SharePoint server should be matched against the list version as indicated by the metadata on the list items entity type. (Default: true)
            </summary>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.#ctor(System.Uri)">
            <summary>
            Creates a new SharePoint data source using web services.
            </summary>
            <param name="siteUrl">URL to the root of the SharePoint site containing the list to connect to.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.#ctor(BdsSoft.SharePoint.Linq.Lists,System.String)">
            <summary>
            Creates a new SharePoint data source using web services.
            </summary>
            <param name="ws">Web service proxy for communication with SharePoint.</param>
            <param name="list">Name of the SharePoint list to connect to.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.#ctor(Microsoft.SharePoint.SPSite)">
            <summary>
            Creates a new SharePoint data source using the SharePoint object model.
            </summary>
            <param name="site">SharePoint site object to use for connecting to the list represented by the entity type.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.#ctor(Microsoft.SharePoint.SPList)">
            <summary>
            Creates a new SharePoint data source using the SharePoint object model.
            </summary>
            <param name="list">SharePoint list object to connect to.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.#ctor(Microsoft.SharePoint.SPList,System.Boolean)">
            <summary>
            Creates a new SharePoint data source using the SharePoint object model.
            </summary>
            <param name="list">SharePoint list object to connect to.</param>
            <param name="performCheck">Indicates whether the ListAttribute should be checked.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Creates/extends a query based on the given query expression.
            </summary>
            <param name="expression">Expression tree representing the query portion to be added.</param>
            <returns>Query provider instance that allows further parsing and/or result fetching.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates/extends a query based on the given query expression.
            </summary>
            <typeparam name="TElement">Output type for items; will be different from T in case of projections.</typeparam>
            <param name="expression">Expression tree representing the query portion to be added.</param>
            <returns>Query provider instance that allows further parsing and/or result fetching.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.ParsePredicate(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses a query filter expression, resulting in a CAML Where element (<see cref="F:BdsSoft.SharePoint.Linq.SharePointDataSource`1._where"/>).
            </summary>
            <param name="predicate">Lambda expression of the query predicate to parse.</param>
            <remarks>Only one filter expression can be parsed per query.</remarks>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.ParsePredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Parses the given predicate recursively, building up the given query predicate element.
            </summary>
            <param name="predicate">Predicate expression to be parsed.</param>
            <param name="predicateParameter">Parameter of the predicate lambda expression. Used to detect references to the entity type itself.</param>
            <param name="queryPredicate">Output XML element to put the parsed predicate in using CAML syntax.</param>
            <param name="isPositive">Indicates whether the predicate should be evaluated as a positive condition or not; serves boolean negation using De Morgan's law.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.CheckForNullableType(System.Linq.Expressions.Expression,System.Nullable{System.Boolean}@)">
            <summary>
            Helper method to check whether the given expression is Nullable type wrapper and removes it.
            </summary>
            <param name="e">Expression to check for Nullable occurrence.</param>
            <param name="isHasValue">Output parameter that indicates that the Nullable usage on the given expression was a HasValue member access.</param>
            <returns>Nullable-free expression.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.FindVisualBasicCompareStringCondition(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            Detects the use of Microsoft.VisualBasic.CompilerServices.Operators.CompareString and Microsoft.VisualBasic.Strings.StrComp for string equality checks.
            </summary>
            <param name="condition">Condition to check for CompareString or StrComp presence.</param>
            <param name="left">Left operand, will be rewritten by the CompareString or StrComp first parameter if CompareString or StrComp usage was detected.</param>
            <param name="right">Right operand, will be rewritten by the CompareString or StrComp second parameter if CompareString or StrComp usage was detected.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetCondition(System.Linq.Expressions.BinaryExpression,System.Boolean,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Get the CAML representation for the specified condition.
            </summary>
            <param name="condition">Condition to translate into CAML.</param>
            <param name="isPositive">Indicates whether the condition should be evaluated in a positive context or not; used for inversion of conditions using De Morgan's law.</param>
            <param name="predicateParameter">Parameter of the predicate lambda expression. Used to detect references to the entity type itself.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.AppendMultiChoiceCondition(System.String,System.Reflection.PropertyInfo,System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Helper method to support MultiChoice field conditions by building a tree of And CAML elements.
            </summary>
            <param name="condition">Condition node textual representation, e.g. Eq.</param>
            <param name="field">Entity property to construct the MultiChoice condition node for.</param>
            <param name="value">Value for the MultiChoice condition.</param>
            <param name="parent">Current tree of MultiChoice conditions to add the new condition node to. Should be null to start creating a condition tree.</param>
            <returns></returns>
            <example>
            If parent == null:
            <![CDATA[
            <condition>
               value
               <FieldRef Name="field" />
            </condition>
            ]]>
            
            If parent != null:
            <![CDATA[
            <And>
               <condition>
                  value
                  <FieldRef Name="field" />
               </condition>
               parent
            </And>
            ]]>
            </example>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetValue(System.Object,BdsSoft.SharePoint.Linq.FieldAttribute)">
            <summary>
            Get a CAML Value element that represents the given value for the given field.
            </summary>
            <param name="value">Field value to get a Value element for.</param>
            <param name="field">Field to get a Value element for.</param>
            <returns>CAML Value element representing the given value for the given field.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetChoiceName(System.Type,System.String)">
            <summary>
            Gets the SharePoint CHOICE value for a given enum field.
            </summary>
            <param name="enumType">Enum type to map the specified field for.</param>
            <param name="field">Enum field name to map to a SharePoint CHOICE value.</param>
            <returns>SharePoint CHOICE value corresponding with the given enum field.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.ParseOrdering(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            Parses a query ordering expression, resulting in a CAML OrderBy element (<see crf="_order"/>).
            </summary>
            <param name="ordering">Lambda expression of the query ordering key selector to parse.</param>
            <param name="descending">Indicates whether or not the ordering should be descending.</param>
            <remarks>Multiple ordering expressions per query are supported.</remarks>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.ParseProjection(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses a query projection expression, resulting in a CAML ViewFields element (<see crf="_projection"/>).
            </summary>
            <param name="projection">Lambda expression of the query projection to parse.</param>
            <remarks>Only one projection expression can be parsed per query.</remarks>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.FindEntityProperties(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Recursive method to find all references to entity properties in a projection expression.
            </summary>
            <param name="e">Expression to search for references to entity properties.</param>
            <param name="projectionParameter">Parameter of the original projection expression. Used to detect references to the entity type itself.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.SetResultRestriction(System.Int32)">
            <summary>
            Sets the restriction on the number of results returned by the query, with semantics like "TOP" in SQL.
            </summary>
            <param name="limit">Restriction on the number of results returned by the query.</param>
            <remarks>Multiple restrictions per query are supported and will result in the mimimum of all restrictions to be effective.</remarks>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.IsEntityPropertyReference(System.Linq.Expressions.Expression)">
            <summary>
            Checks whether an expression is a reference to an entity property or not.
            </summary>
            <param name="e">Expression to be checked.</param>
            <returns>True if the expression refers to an entity property; otherwise false.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.DropToString(System.Linq.Expressions.Expression)">
            <summary>
            Helper method to drop excessive tail ToString calls on string instances for a given expression.
            </summary>
            <param name="e">Expression to drop excessive tail ToString calls for.</param>
            <returns>Expression without tail ToString calls on string instances.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.EnsureLambdaFree(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Recursive method to ensure that a given expression doesn't contain a dependency on a given lambda parameter.
            </summary>
            <param name="e">Expression to validate.</param>
            <param name="parameter">Forbidden lambda parameter to look for.</param>
            <exception cref="T:System.NotSupportedException">Occurs when the specified lambda parameter is found in the expression.</exception>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetFieldRef(System.Reflection.PropertyInfo)">
            <summary>
            Gets a CAML FieldRef element for the specified entity property.
            </summary>
            <param name="property">Entity property to get the FieldRef element for.</param>
            <returns>FieldRef element for the specified entity property.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetFieldAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves the FieldAttribute applied on the specified entity property, if one is set.
            </summary>
            <param name="member">Entity property to examine for a FieldAttribute.</param>
            <returns>The FieldAttribute applied on the specified entity property; null if not set.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by the specified expression tree.
            </summary>
            <param name="expression">The System.Linq.Expressions.Expression representing the query to be executed.</param>
            <returns>An System.Object representing the result of the specified query.</returns>
            <remarks>Currently not implemented for LINQ-to-SharePoint.</remarks>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by the specified expression tree.
            </summary>
            <typeparam name="TResult">Object type of the result.</typeparam>
            <param name="expression">The System.Linq.Expressions.Expression that represents the query to be executed.</param>
            <returns>A value of type TResult representing the result of the specified query.</returns>
            <remarks>Currently not implemented for LINQ-to-SharePoint.</remarks>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetEnumerator">
            <summary>
            Triggers the query and fetches results.
            </summary>
            <returns>Query results.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-generic IEnumerable implementation. This will trigger the query and fetch results.
            </summary>
            <returns>Query results.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1._CheckVersion">
            <summary>
            Performs a list version check to make sure that the exported list definition matches the online list version.
            </summary>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetListAttribute">
            <summary>
            Helper method to get the ListAttribute applied on the entity object. An InvalidOperationException will be thrown if no ListAttribute is found.
            </summary>
            <returns>ListAttribute applied on the entity object.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetEnumeratorSp">
            <summary>
            Helper method to execute a query and fetch results using the SharePoint Object Model.
            </summary>
            <returns>Query results.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetEnumeratorWs">
            <summary>
            Helper method to execute a query and fetch results using SharePoint web services.
            </summary>
            <returns>Query results.</returns>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.DoLogging">
            <summary>
            Helper method to log query information before fetching results.
            </summary>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.GetItem(Microsoft.SharePoint.SPListItem,System.Data.DataRow)">
            <summary>
            Constructs a query result object based on the given item that was retrieved either via the SharePoint object model or via the SharePoint list web service.
            </summary>
            <param name="item">Item retrieved via the SharePoint object model.</param>
            <param name="row">Item retrieved via the SharePoint list web service.</param>
            <returns>Query result object for the query, reflecting the final result (possibly after projection).</returns>
            <remarks>Either item or row should be null.</remarks>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.AssignResultProperty(Microsoft.SharePoint.SPListItem,System.Data.DataRow,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns a value from the query result to a given property of the entity object.
            </summary>
            <param name="item">Query result item retrieved using the SharePoint object model.</param>
            <param name="row">Query result item retrieved using the SharePoint lists web service.</param>
            <param name="property">Property to set on the entity object.</param>
            <param name="target">Entity object to set the property for.</param>
        </member>
        <member name="M:BdsSoft.SharePoint.Linq.SharePointDataSource`1.Dispose">
            <summary>
            Closes the web service connection if used.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.SharePointDataSource`1.Log">
            <summary>
            Gets or sets a logger object to report information about the query when executing.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.SharePointDataSource`1.CheckListVersion">
            <summary>
            Gets or sets whether the version of the list on the SharePoint server should be matched against the list version as indicated by the metadata on the list items entity type. (Default: true)
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.SharePointDataSource`1.Credentials">
            <summary>
            Gets or sets the network credentials to connect to the SharePoint web services.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.SharePointDataSource`1.ElementType">
            <summary>
            Gets the type of the elements held in the data source object.
            </summary>
        </member>
        <member name="P:BdsSoft.SharePoint.Linq.SharePointDataSource`1.Expression">
            <summary>
            Gets the expression tree representation of the data source object.
            </summary>
        </member>
        <member name="T:BdsSoft.SharePoint.Linq.Lists">
            <summary>
            Web service proxy for the SharePoint lists web service.
            </summary>
        </member>
    </members>
</doc>
